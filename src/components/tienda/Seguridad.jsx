import React, { useState } from 'react';
import { Form, Button, Alert } from 'react-bootstrap';

const Seguridad = () => {
  const [formData, setFormData] = useState({
    contrase√±aActual: '',
    nuevaContrase√±a: '',
    confirmarContrase√±a: ''
  });
  const [errores, setErrores] = useState({});
  const [showAlert, setShowAlert] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');
  const [alertVariant, setAlertVariant] = useState('success');

  // Obtener usuario actual
  const obtenerUsuarioActual = () => {
    try {
      const usuarioAuth = JSON.parse(localStorage.getItem('auth_user'));
      const usuarios = JSON.parse(localStorage.getItem('app_usuarios')) || [];
      return usuarios.find(u => u.run === usuarioAuth?.run);
    } catch (error) {
      console.error('Error al obtener usuario actual:', error);
      return null;
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Limpiar error del campo cuando el usuario empiece a escribir
    if (errores[name]) {
      setErrores(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  // Validar contrase√±a actual
  const validarContrase√±aActual = (contrase√±a) => {
    const usuario = obtenerUsuarioActual();
    if (!usuario) {
      return 'No se pudo obtener la informaci√≥n del usuario';
    }
    
    if (!contrase√±a || contrase√±a.trim().length === 0) {
      return 'La contrase√±a actual es obligatoria';
    }
    
    if (contrase√±a !== usuario.contrasenha) {
      return 'La contrase√±a actual no es correcta';
    }
    
    return '';
  };

  // Validar nueva contrase√±a
  const validarNuevaContrase√±a = (contrase√±a) => {
    if (!contrase√±a || contrase√±a.trim().length === 0) {
      return 'La nueva contrase√±a es obligatoria';
    }
    
    if (contrase√±a.length < 4 || contrase√±a.length > 10) {
      return 'La contrase√±a debe tener entre 4 y 10 caracteres';
    }
    
    return '';
  };

  // Validar confirmaci√≥n de contrase√±a
  const validarConfirmarContrase√±a = (confirmarContrase√±a, nuevaContrase√±a) => {
    if (!confirmarContrase√±a || confirmarContrase√±a.trim().length === 0) {
      return 'Debes confirmar la nueva contrase√±a';
    }
    
    if (confirmarContrase√±a !== nuevaContrase√±a) {
      return 'Las contrase√±as no coinciden';
    }
    
    return '';
  };

  // Validar formulario completo
  const validarFormulario = () => {
    const nuevosErrores = {
      contrase√±aActual: validarContrase√±aActual(formData.contrase√±aActual),
      nuevaContrase√±a: validarNuevaContrase√±a(formData.nuevaContrase√±a),
      confirmarContrase√±a: validarConfirmarContrase√±a(formData.confirmarContrase√±a, formData.nuevaContrase√±a)
    };

    setErrores(nuevosErrores);
    
    return Object.values(nuevosErrores).every(error => error === '');
  };

  // Actualizar contrase√±a en localStorage
  const actualizarContrase√±aEnStorage = (nuevaContrase√±a) => {
    try {
      const usuarioAuth = JSON.parse(localStorage.getItem('auth_user'));
      const usuarios = JSON.parse(localStorage.getItem('app_usuarios')) || [];
      
      const usuarioIndex = usuarios.findIndex(u => u.run === usuarioAuth?.run);
      
      if (usuarioIndex === -1) {
        throw new Error('Usuario no encontrado');
      }
      
      // Actualizar contrase√±a en app_usuarios
      usuarios[usuarioIndex].contrasenha = nuevaContrase√±a;
      localStorage.setItem('app_usuarios', JSON.stringify(usuarios));
      
      return true;
    } catch (error) {
      console.error('Error al actualizar contrase√±a:', error);
      return false;
    }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    // Validar formulario
    if (!validarFormulario()) {
      setAlertVariant('danger');
      setAlertMessage('Por favor corrige los errores del formulario');
      setShowAlert(true);
      setTimeout(() => setShowAlert(false), 5000);
      return;
    }
    
    // Actualizar contrase√±a
    const exito = actualizarContrase√±aEnStorage(formData.nuevaContrase√±a);
    
    if (exito) {
      setAlertVariant('success');
      setAlertMessage('‚úÖ Contrase√±a actualizada correctamente');
      setShowAlert(true);
      
      // Limpiar formulario
      setFormData({
        contrase√±aActual: '',
        nuevaContrase√±a: '',
        confirmarContrase√±a: ''
      });
      setErrores({});
      
      setTimeout(() => setShowAlert(false), 5000);
    } else {
      setAlertVariant('danger');
      setAlertMessage('‚ùå Error al actualizar la contrase√±a');
      setShowAlert(true);
      setTimeout(() => setShowAlert(false), 5000);
    }
  };

  return (
    <>
      <h5 
        className="mb-4 fw-bold"
        style={{ 
          color: '#000000',
          fontFamily: "'Lato', sans-serif",
          fontSize: '1.3rem'
        }}
      >
        Cambiar Contrase√±a
      </h5>

      {showAlert && (
        <Alert 
          variant={alertVariant}
          className="mb-4 text-center border-3 border-dark rounded-4"
          style={{
            backgroundColor: alertVariant === 'success' ? '#87CEEB' : '#FFB6C1',
            color: '#000000',
            fontWeight: '600'
          }}
        >
          {alertMessage}
        </Alert>
      )}

      <Form onSubmit={handleSubmit}>
        <Form.Group className="mb-3">
          <Form.Label className="fw-semibold" style={{ color: '#000000', fontSize: '1.1rem' }}>
            Contrase√±a Actual <span style={{ color: 'red' }}>*</span>
          </Form.Label>
          <Form.Control 
            type="password"
            name="contrase√±aActual"
            value={formData.contrase√±aActual}
            onChange={handleInputChange}
            isInvalid={!!errores.contrase√±aActual}
            className="border-3 border-dark rounded-3 py-3"
            style={{
              backgroundColor: '#FFFFFF',
              color: '#000000',
              fontFamily: "'Lato', sans-serif"
            }}
            placeholder="Ingresa tu contrase√±a actual"
          />
          <Form.Control.Feedback type="invalid" style={{ fontFamily: "'Lato', sans-serif" }}>
            {errores.contrase√±aActual}
          </Form.Control.Feedback>
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label className="fw-semibold" style={{ color: '#000000', fontSize: '1.1rem' }}>
            Nueva Contrase√±a <span style={{ color: 'red' }}>*</span>
          </Form.Label>
          <Form.Control 
            type="password"
            name="nuevaContrase√±a"
            value={formData.nuevaContrase√±a}
            onChange={handleInputChange}
            isInvalid={!!errores.nuevaContrase√±a}
            className="border-3 border-dark rounded-3 py-3"
            style={{
              backgroundColor: '#FFFFFF',
              color: '#000000',
              fontFamily: "'Lato', sans-serif"
            }}
            placeholder="Entre 4 y 10 caracteres"
          />
          <Form.Control.Feedback type="invalid" style={{ fontFamily: "'Lato', sans-serif" }}>
            {errores.nuevaContrase√±a}
          </Form.Control.Feedback>
          <Form.Text className="text-muted" style={{ fontFamily: "'Lato', sans-serif" }}>
            La contrase√±a debe tener entre 4 y 10 caracteres
          </Form.Text>
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label className="fw-semibold" style={{ color: '#000000', fontSize: '1.1rem' }}>
            Confirmar Nueva Contrase√±a <span style={{ color: 'red' }}>*</span>
          </Form.Label>
          <Form.Control 
            type="password"
            name="confirmarContrase√±a"
            value={formData.confirmarContrase√±a}
            onChange={handleInputChange}
            isInvalid={!!errores.confirmarContrase√±a}
            className="border-3 border-dark rounded-3 py-3"
            style={{
              backgroundColor: '#FFFFFF',
              color: '#000000',
              fontFamily: "'Lato', sans-serif"
            }}
            placeholder="Repite tu nueva contrase√±a"
          />
          <Form.Control.Feedback type="invalid" style={{ fontFamily: "'Lato', sans-serif" }}>
            {errores.confirmarContrase√±a}
          </Form.Control.Feedback>
        </Form.Group>

        <div className="text-center">
          <Button 
            type="submit" 
            className="rounded-pill px-5 py-3 border-3 border-dark fw-bold"
            style={{
              backgroundColor: '#dedd8ff5',
              color: '#000000',
              transition: 'all 0.3s ease',
              fontFamily: "'Lato', sans-serif",
              fontSize: '1.1rem'
            }}
            onMouseEnter={(e) => {
              e.target.style.transform = 'translateY(-2px)';
              e.target.style.boxShadow = '0 6px 20px rgba(222, 221, 143, 0.6)';
              e.target.style.backgroundColor = '#FFD700';
            }}
            onMouseLeave={(e) => {
              e.target.style.transform = 'translateY(0)';
              e.target.style.boxShadow = 'none';
              e.target.style.backgroundColor = '#dedd8ff5';
            }}
          >
            üîë Actualizar Contrase√±a
          </Button>
        </div>

        <div className="text-center mt-3">
          <p style={{ color: '#000000', fontSize: '0.9rem' }}>
            <span style={{ color: 'red' }}>*</span> Campos obligatorios
          </p>
        </div>
      </Form>
    </>
  );
};

export default Seguridad;